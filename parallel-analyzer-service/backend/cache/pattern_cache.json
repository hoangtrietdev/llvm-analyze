{
  "4459df57790d6cc35594493c13f4a346b2d9f3bda9eb174dbab9cda1013ecf85": {
    "analysis": {
      "classification": "requires_analysis",
      "reasoning": "Individual candidate analysis",
      "confidence": 0.7,
      "transformations": [],
      "tests_recommended": [],
      "logic_issue_type": "none",
      "analysis_source": "ai_llm"
    },
    "timestamp": 1759257189.3389509,
    "usage_count": 1,
    "pattern_hash": "4459df57790d6cc35594493c13f4a346b2d9f3bda9eb174dbab9cda1013ecf85",
    "original_code_snippet": "// Dot product - reduction with two arrays\ndouble dotProduct(const std::vector<double>& a, const std::vector<double>& b) {\n    double sum = 0.0;\n    for (size_t i = 0; i < a.size(); i++) {\n        sum",
    "confidence": 0.7
  },
  "262ebf74ce48cf7c15547e3fed25ae22b3ea950ecce56600f5e98b8ca9751cac": {
    "analysis": {
      "classification": "requires_analysis",
      "reasoning": "Individual candidate analysis",
      "confidence": 0.7,
      "transformations": [],
      "tests_recommended": [],
      "logic_issue_type": "none",
      "analysis_source": "ai_llm"
    },
    "timestamp": 1759257189.339505,
    "usage_count": 1,
    "pattern_hash": "262ebf74ce48cf7c15547e3fed25ae22b3ea950ecce56600f5e98b8ca9751cac",
    "original_code_snippet": "// Simple reduction - sum\ndouble sumReduction(const std::vector<double>& data) {\n    double sum = 0.0;\n    for (size_t i = 0; i < data.size(); i++) {\n        sum += data[i];\n    }\n    return sum;",
    "confidence": 0.7
  },
  "5d9d9ea1371008cfdb32e56a4e26cf70f6b3edfcbbaf9cca4764ba9fd0b0f32c": {
    "analysis": {
      "classification": "requires_analysis",
      "reasoning": "Individual candidate analysis",
      "confidence": 0.7,
      "transformations": [],
      "tests_recommended": [],
      "logic_issue_type": "none",
      "analysis_source": "ai_llm"
    },
    "timestamp": 1759257189.3402398,
    "usage_count": 1,
    "pattern_hash": "5d9d9ea1371008cfdb32e56a4e26cf70f6b3edfcbbaf9cca4764ba9fd0b0f32c",
    "original_code_snippet": "    for (size_t i = 1; i < data.size(); i++) {\n        if (data[i] > maxVal) {\n            maxVal = data[i];\n        }\n    }\n    return maxVal;\n}",
    "confidence": 0.7
  },
  "48aa6a7219abcee8872ce20f364581636746af15e0d8fa3b0bee2b8f602059b4": {
    "analysis": {
      "classification": "requires_analysis",
      "reasoning": "Individual candidate analysis",
      "confidence": 0.7,
      "transformations": [],
      "tests_recommended": [],
      "logic_issue_type": "none",
      "analysis_source": "ai_llm"
    },
    "timestamp": 1759257189.340798,
    "usage_count": 1,
    "pattern_hash": "48aa6a7219abcee8872ce20f364581636746af15e0d8fa3b0bee2b8f602059b4",
    "original_code_snippet": "std::vector<double> runningSum(const std::vector<double>& data) {\n    std::vector<double> result(data.size());\n    result[0] = data[0];\n    for (size_t i = 1; i < data.size(); i++) {\n        result[i]",
    "confidence": 0.7
  },
  "7c17e38a274b60f4f161d5c8bcab39ef8a9e8414b23151bc16b2548b67091b3b": {
    "analysis": {
      "classification": "requires_analysis",
      "reasoning": "Individual candidate analysis",
      "confidence": 0.7,
      "transformations": [],
      "tests_recommended": [],
      "logic_issue_type": "none",
      "analysis_source": "ai_llm"
    },
    "timestamp": 1759257189.341632,
    "usage_count": 1,
    "pattern_hash": "7c17e38a274b60f4f161d5c8bcab39ef8a9e8414b23151bc16b2548b67091b3b",
    "original_code_snippet": "// Max reduction\ndouble maxReduction(const std::vector<double>& data) {\n    double maxVal = data[0];\n    for (size_t i = 1; i < data.size(); i++) {\n        if (data[i] > maxVal) {\n            maxVal =",
    "confidence": 0.7
  },
  "62c4db58e6eba87b246f0c21c745358b660291abfc8cca5cb023840c38867bd6": {
    "analysis": {
      "classification": "requires_analysis",
      "reasoning": "Individual candidate analysis",
      "confidence": 0.7,
      "transformations": [],
      "tests_recommended": [],
      "logic_issue_type": "none",
      "analysis_source": "ai_llm"
    },
    "timestamp": 1759257209.472894,
    "usage_count": 1,
    "pattern_hash": "62c4db58e6eba87b246f0c21c745358b660291abfc8cca5cb023840c38867bd6",
    "original_code_snippet": "};\n\nvoid matrixAdd(const Matrix& A, const Matrix& B, Matrix& C) {\n    for (size_t i = 0; i < A.rows; ++i) {\n        for (size_t j = 0; j < A.cols; ++j) {\n            C.data[i][j] = A.data[i][j] + B.da",
    "confidence": 0.7
  },
  "6cc3f0e59ce6202ae174c36a597b8bae878a40dcdee94b39556c3b9f72f1b513": {
    "analysis": {
      "classification": "requires_analysis",
      "reasoning": "Individual candidate analysis",
      "confidence": 0.7,
      "transformations": [],
      "tests_recommended": [],
      "logic_issue_type": "none",
      "analysis_source": "ai_llm"
    },
    "timestamp": 1759257209.473763,
    "usage_count": 1,
    "pattern_hash": "6cc3f0e59ce6202ae174c36a597b8bae878a40dcdee94b39556c3b9f72f1b513",
    "original_code_snippet": "\nvoid matrixAdd(const Matrix& A, const Matrix& B, Matrix& C) {\n    for (size_t i = 0; i < A.rows; ++i) {\n        for (size_t j = 0; j < A.cols; ++j) {\n            C.data[i][j] = A.data[i][j] + B.data[",
    "confidence": 0.7
  },
  "8c95ea39b2404cd0d72d641151de314f1346532ccba63d06cfb7c3fd65dffb5d": {
    "analysis": {
      "classification": "requires_analysis",
      "reasoning": "Individual candidate analysis",
      "confidence": 0.7,
      "transformations": [],
      "tests_recommended": [],
      "logic_issue_type": "none",
      "analysis_source": "ai_llm"
    },
    "timestamp": 1759257223.673598,
    "usage_count": 1,
    "pattern_hash": "8c95ea39b2404cd0d72d641151de314f1346532ccba63d06cfb7c3fd65dffb5d",
    "original_code_snippet": "    double kernel[3][3] = {{-1, -1, -1}, {-1, 8, -1}, {-1, -1, -1}};\n    \n    for (int i = 1; i < N-1; i++) {\n        for (int j = 1; j < N-1; j++) {\n            double sum = 0.0;\n            for (int",
    "confidence": 0.7
  },
  "fd046a232c7720416b56d57859b8a8aecdf7d0be868fed07b7807a4f525cb431": {
    "analysis": {
      "classification": "requires_analysis",
      "reasoning": "Individual candidate analysis",
      "confidence": 0.7,
      "transformations": [],
      "tests_recommended": [],
      "logic_issue_type": "none",
      "analysis_source": "ai_llm"
    },
    "timestamp": 1759257223.674486,
    "usage_count": 1,
    "pattern_hash": "fd046a232c7720416b56d57859b8a8aecdf7d0be868fed07b7807a4f525cb431",
    "original_code_snippet": "    // 9-point stencil\n    \n    for (int i = 1; i < N-1; i++) {\n        for (int j = 1; j < N-1; j++) {\n            global_new_grid[i][j] = (\n                global_grid[i-1][j-1] + global_grid[i-1][j",
    "confidence": 0.7
  },
  "aa073518de576c1e8545df9efc4928b0f8076a7e46398bc6ff3fa98c17238a5a": {
    "analysis": {
      "classification": "requires_analysis",
      "reasoning": "Individual candidate analysis",
      "confidence": 0.7,
      "transformations": [],
      "tests_recommended": [],
      "logic_issue_type": "none",
      "analysis_source": "ai_llm"
    },
    "timestamp": 1759257223.675174,
    "usage_count": 1,
    "pattern_hash": "aa073518de576c1e8545df9efc4928b0f8076a7e46398bc6ff3fa98c17238a5a",
    "original_code_snippet": "    // Simple image blur\n    \n    for (int i = 1; i < M-1; i++) {\n        for (int j = 1; j < M-1; j++) {\n            int sum = global_image_big[i-1][j-1] + global_image_big[i-1][j] + global_image_big",
    "confidence": 0.7
  },
  "acb4c52a6cae58c4ca61dd43d9dd386f96666cfd6db8dff1e3424215fbf79836": {
    "analysis": {
      "classification": "requires_analysis",
      "reasoning": "Individual candidate analysis",
      "confidence": 0.7,
      "transformations": [],
      "tests_recommended": [],
      "logic_issue_type": "none",
      "analysis_source": "ai_llm"
    },
    "timestamp": 1759257223.675812,
    "usage_count": 1,
    "pattern_hash": "acb4c52a6cae58c4ca61dd43d9dd386f96666cfd6db8dff1e3424215fbf79836",
    "original_code_snippet": "    // 2D stencil - 5-point stencil (heat equation)\n    \n    for (int i = 1; i < N-1; i++) {\n        for (int j = 1; j < N-1; j++) {\n            global_new_grid[i][j] = (global_grid[i-1][j] + global_g",
    "confidence": 0.7
  },
  "fa54c4a271a56ea1cd425a116c3d6273a861a2aa0d1fc2bd022d262089361a4c": {
    "analysis": {
      "classification": "safe_parallel",
      "reasoning": "Static analysis identifies this as vectorizable; positive indicators found in code context",
      "confidence": 0.95,
      "transformations": [
        "#pragma omp simd",
        "Enable compiler auto-vectorization"
      ],
      "tests_recommended": [
        "Compare parallel vs sequential results",
        "Performance benchmarking",
        "Verify SIMD instruction generation"
      ],
      "logic_issue_type": "none",
      "analysis_source": "heuristic_analysis"
    },
    "timestamp": 1759257972.852562,
    "usage_count": 1,
    "pattern_hash": "fa54c4a271a56ea1cd425a116c3d6273a861a2aa0d1fc2bd022d262089361a4c",
    "original_code_snippet": "\n// Another parallel candidate - element-wise multiplication\nvoid vectorMultiply(const float* a, const float* b, float* result, int n) {\n    for (int i = 0; i < n; i++) {\n        result[i] = a[i] * b[",
    "confidence": 0.95
  },
  "de687555261750d3702c3fb01de4afb812a30620ad921c9f3ecf5854b1220202": {
    "analysis": {
      "classification": "safe_parallel",
      "reasoning": "Static analysis identifies this as embarrassingly_parallel; positive indicators found in code context",
      "confidence": 0.95,
      "transformations": [
        "#pragma omp parallel for"
      ],
      "tests_recommended": [
        "Compare parallel vs sequential results",
        "Performance benchmarking"
      ],
      "logic_issue_type": "none",
      "analysis_source": "heuristic_analysis"
    },
    "timestamp": 1759257972.8538508,
    "usage_count": 1,
    "pattern_hash": "de687555261750d3702c3fb01de4afb812a30620ad921c9f3ecf5854b1220202",
    "original_code_snippet": "\n// Simple parallel loop candidate - vector addition\nvoid vectorAdd(const std::vector<float>& a, const std::vector<float>& b, std::vector<float>& c) {\n    for (size_t i = 0; i < a.size(); i++) {\n     ",
    "confidence": 0.95
  },
  "a54df4cecc0fb97caadd0af04d53951a02d4215e796b81fdaaa776c4860d81d7": {
    "analysis": {
      "classification": "safe_parallel",
      "reasoning": "Static analysis identifies this as embarrassingly_parallel; positive indicators found in code context",
      "confidence": 0.95,
      "transformations": [
        "#pragma omp parallel for"
      ],
      "tests_recommended": [
        "Compare parallel vs sequential results",
        "Performance benchmarking"
      ],
      "logic_issue_type": "none",
      "analysis_source": "heuristic_analysis"
    },
    "timestamp": 1759257972.854783,
    "usage_count": 1,
    "pattern_hash": "a54df4cecc0fb97caadd0af04d53951a02d4215e796b81fdaaa776c4860d81d7",
    "original_code_snippet": "// Reduction pattern - sum computation\nfloat computeSum(const std::vector<float>& data) {\n    float sum = 0.0f;\n    for (size_t i = 0; i < data.size(); i++) {\n        sum += data[i];  // Reduction pat",
    "confidence": 0.95
  },
  "860172eb6eb7d3431870db0ded5a8519039a207a89ad3278add436784cc9a760": {
    "analysis": {
      "classification": "safe_parallel",
      "reasoning": "Static analysis identifies this as vectorizable; positive indicators found in code context",
      "confidence": 0.95,
      "transformations": [
        "#pragma omp simd",
        "Enable compiler auto-vectorization"
      ],
      "tests_recommended": [
        "Compare parallel vs sequential results",
        "Performance benchmarking",
        "Verify SIMD instruction generation"
      ],
      "logic_issue_type": "none",
      "analysis_source": "heuristic_analysis"
    },
    "timestamp": 1759257972.855777,
    "usage_count": 1,
    "pattern_hash": "860172eb6eb7d3431870db0ded5a8519039a207a89ad3278add436784cc9a760",
    "original_code_snippet": "\n// Sequential dependency - not parallelizable\nvoid sequentialDependency(std::vector<float>& data) {\n    for (size_t i = 1; i < data.size(); i++) {\n        data[i] = data[i] + data[i-1];  // data[i] d",
    "confidence": 0.95
  }
}